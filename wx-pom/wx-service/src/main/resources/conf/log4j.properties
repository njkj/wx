
######################## 配置说明   ##########################
## 			设置日志记录的优先级，依次分为：
##      	OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL
##
################日志输出位置类型：################
##			org.apache.log4j.ConsoleAppender（控制台），
##			org.apache.log4j.FileAppender（文件），
##			org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
##			org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）
##			org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
##
################Log4j提供的layout有以下几种：################
##			org.apache.log4j.HTMLLayout（以HTML表格形式布局），
##			org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
##			org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
##			org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
######################## 配置说明   ##########################


###日志记录的优先级，和日志输出位置名：info为优先级，stdout,appender1为位置名
log4j.rootLogger=info,stdout,FILE

#框架jar包中的日志设置
log4j.logger.com.opensymphony.oscache=DEBUG
log4j.logger.org.apache.cxf=DEBUG
log4j.logger.net.sf.navigator=DEBUG
log4j.logger.org.apache.commons=DEBUG
log4j.logger.org.apache.struts=DEBUG
log4j.logger.org.displaytag=DEBUG
log4j.logger.org.springframework=DEBUG
log4j.logger.org.hibernate.ps.PreparedStatementCache=WARN
log4j.logger.org.springframework=DEBUG
log4j.logger.org.hibernate=DEBUG
log4j.logger.org.springframework.core.io.support.PathMatchingResourcePatternResolver=DEBUG


###显示SQL语句部分
log4j.logger.com.ibatis=DEBUG
log4j.logger.com.ibatis.common.jdbc.SimpleDataSource=DEBUG
log4j.logger.com.ibatis.common.jdbc.ScriptRunner=DEBUG
log4j.logger.com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate=DEBUG
log4j.logger.java.sql.Connection=DEBUG
log4j.logger.java.sql.Statement=DEBUG
log4j.logger.java.sql.PreparedStatement=DEBUG
log4j.logger.java.sql.ResultSet=DEBUG
log4j.logger.org.mybatis=DEBUG
log4j.logger.org.mybatis=DEBUG
log4j.logger.org.mybatis.spring=DEBUG


############ 输出到控制台############
log4j.appender.stdout = org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target = System.out
log4j.appender.stdout.Threshold=WARN
log4j.appender.stdout.Encoding=UTF-8
#输出日志布局
log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
#输出日志格式
log4j.appender.stdout.layout.ConversionPattern=[%x] [%d{yyyy-MM-dd HH:mm:ss}](%t) [%c]:%L-[%p] %m%n


############输出到文件############(这里默认为追加方式) 此配置是每天产生一个日志文件
log4j.appender.FILE=org.apache.log4j.DailyRollingFileAppender
#设置文件输出路径
log4j.appender.FILE.File=${catalina.home}/appLogs/log.log
log4j.appender.FILE.DatePattern = '.'yyyy-MM-dd
#设置文件输出样式
log4j.appender.FILE.layout=org.apache.log4j.PatternLayout
log4j.appender.FILE.layout.ConversionPattern=[%d{yy/MM/dd HH:mm:ss:SSS}][%C-%M] %m%n

#
#############输入至数据库###############
##输入至数据库的类  
#log4j.appender.DATABASE=org.apache.log4j.jdbc.JDBCAppender
##日志级别  
#log4j.appender.DATABASE.Threshold=WARN
#log4j.appender.DATABASE.filter.F1.levelMin=ERROR
#log4j.appender.DATABASE.filter.F1.levelMax=ERROR
#log4j.appender.DATABASE.filter.F1.acceptOnMatch=true
##当有30条时一起存入数据库  
#log4j.appender.DATABASE.layout=org.apache.log4j.PatternLayout
#log4j.appender.DATABASE.BufferSize=30
#log4j.appender.DATABASE.URL=dbc:mysql://120.25.62.51:3306/xfsy?useUnicode=true&characterEncoding=utf8
#log4j.appender.DATABASE.driver=com.mysql.jdbc.Driver
#log4j.appender.DATABASE.user=xfsy
#log4j.appender.DATABASE.password=xfsy
##数据库语句  
#log4j.appender.DATABASE.sql=INSERT INTO AFS_DRP_SERVER_RUN_LOG(ID, LOG_LEVEL, LOCATION, LINE_NO, FILE_NAME, LOG_TIME, CATEGORY, MESSAGE) VALUES ('LOG' || SEQ_SERVER_RUN_LOG.NEXTVAL ,'%p', '%l', '%L', '%F', '%d{yyyy-MM-dd HH\:mm\:ss}', '%c', '%m')
##%m 输出代码中指定的消息
##%p 输出优先级，即DEBUG,INFO,WARN,ERROR,FATAL
##%r 输出自应用启动到输出该log信息耗费的毫秒数
##%t 输出产生该日志事件的线程名；
##%n 输出一个回车换行符,Windows平台为"\r\n",Unix平台为"\n"
##%d 输出日志时间的日期或时间，默认格式为ISO8601，也可以在其后指定格式， 比如：%d{yyy MMM dd HH:mm:ss,SSS},输出类似：2008年10月18日22：10：28：832
##%c 输出所属的类目，通常就是所在类的全名，如“iNotes.Default”；
##%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数
##%L 输出代码中的行数;
##%F 输出代码中的文件名;
##INSERT INTO AFS_DRP_SERVER_RUN_LOG(ID, LOG_LEVEL, CATEGORY, LOG_TIME, LOCATION, LINE_NO, FILE_NAME, MESSAGE) VALUES ('LOG' || SEQ_SERVER_RUN_LOG.NEXTVAL ,'%p', '%c', '%d{yyyy-MM-dd HH:mm:ss}', '%l', '%L', '%F', '%m')

log4j.appender.LOGFILE.encoding=utf-8

